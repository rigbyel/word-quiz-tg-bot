#include <stdio.h>
#include <tgbot/tgbot.h>
#include <vector>
#include <string>
#include <map>
#include "quiz_model.h"

std::vector<std::string> bot_commands = {"start", "newgame", "hint"};
std::vector<std::string> succes_replies = {"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –≠—Ç–∞ –±—É–∫–≤–∞ –≤ —Å–ª–æ–≤–µ –µ—Å—Ç—å!",
                                        "–ë—Ä–∞–≤–æ! –° —ç—Ç–æ–π –±—É–∫–≤–æ–π –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
                                        "–í —Ç–æ—á–∫—É! –ï—Å—Ç—å —Ç–∞–∫–∞—è –±—É–∫–≤–∞!",
                                        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ë—É–∫–≤–∞ –Ω–∞ –º–µ—Å—Ç–µ!"};    
std::vector<std::string> fail_replies = {"–≠—Ö, —Å —ç—Ç–æ–π –±—É–∫–≤–æ–π –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ...",
                                        "–û–π-–æ–π, –Ω–µ –ø–æ–ø–∞–ª–∏. –ù–æ —ç—Ç–æ –∂–µ –∏–≥—Ä–∞, –¥–∞–≤–∞–π—Ç–µ –¥–∞–ª—å—à–µ...",
                                        "–ê–π-–∞–π-–∞–π, –º–∏–º–æ...",
                                        "–£–≤—ã! –¢–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç..."};

int len_success = succes_replies.size();
int len_fail = fail_replies.size();

int main() {
    TgBot::Bot bot("6382915085:AAEEgKpi3Z9AWtA_wdoEMgtr_oBnm08wHlE");
    std::map<int64_t, Game> users;

    bot.getEvents().onCommand("start", [&](TgBot::Message::Ptr message) {
        bot.getApi().sendMessage(message->chat->id, "–ü—Ä–∏–≤–µ—Ç!ü§ñ\n–Ø –±–æ—Ç-–∑–∞–≥–∞–¥—á–∏–∫ —Å–ª–æ–≤ \n\n–í–≤–æ–¥–∏—Ç–µ –±—É–∫–≤—ã, —á—Ç–æ–±—ã –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–≥–∞–¥–∞–ª.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã.\n\n‚úÖ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–≤–µ–¥–∏—Ç–µ /hint");
        users[message->chat->id] = Game();
        users[message->chat->id].start_game();
    });

    bot.getEvents().onCommand("newgame", [&](TgBot::Message::Ptr message) {
        bot.getApi().sendMessage(message->chat->id, "–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ!üéØ \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å –µ–≥–æ, –Ω–∞—á–∞–≤ —Å –ª—é–±–æ–π –±—É–∫–≤—ã.");
        users[message->chat->id] = Game();
        users[message->chat->id].start_game();
    });

    bot.getEvents().onCommand("hint", [&](TgBot::Message::Ptr message) {
        if (!(users.count(message->chat->id))){
            bot.getApi().sendMessage(message->chat->id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É\n\n –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /newgame");
            return;
        }
        if (users[message->chat->id].open_letter()) {
            bot.getApi().sendMessage(message->chat->id, "–ß—É–≤—Å—Ç–≤—É—é, –≤–∞–º –Ω—É–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–º–µ–∫... –í–æ—Ç!");
            bot.getApi().sendMessage(message->chat->id, users[message->chat->id].word.get_current());
            if (users[message->chat->id].check_success()) {
                bot.getApi().sendMessage(message->chat->id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ.\n\n–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É?\n–í–≤–µ–¥–∏—Ç–µ /newgame");
                users[message->chat->id].end_game();
            }
        }
        else {
            bot.getApi().sendMessage(message->chat->id, "–ü–æ–¥c–∫–∞–∑–∫–∞?\n–ù–æ –≤—ã —É–∂–µ –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ...\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –≤–≤–µ–¥–∏—Ç–µ /newgame");
        }
    });

    bot.getEvents().onAnyMessage([&](TgBot::Message::Ptr message) {

        std::cout << "Username: " << message->chat->firstName << " Text: " << message->text<< std::endl;

        for (const auto& command : bot_commands) {
            if ("/" + command == message->text) {
                return;
            }
        }

        if (std::tolower(message->text[0]) < 97 | (std::tolower(message->text[0]) > 122))
        {
            bot.getApi().sendMessage(message->chat->id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã.");
            return;
        }

        if (message->text.size() > 1)
        {
            bot.getApi().sendMessage(message->chat->id, "–£ –≤–∞—Å –±–æ–ª—å—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã...\n–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É.");
            return;
        }

        if (users[message->chat->id].isover()) {
            bot.getApi().sendMessage(message->chat->id, "–í—ã —É–∂–µ –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /newgame");
            return;
        }

        char letter = message->text[0];
        bool guess = users[message->chat->id].guess_letter(letter);

        if (guess & !users[message->chat->id].check_success()) {
            bot.getApi().sendMessage(message->chat->id, succes_replies[get_randint(len_success)]);
        }
        if (!guess) {
            bot.getApi().sendMessage(message->chat->id, fail_replies[get_randint(len_fail)]);
        }
        bot.getApi().sendMessage(message->chat->id, users[message->chat->id].word.get_current());
        if (users[message->chat->id].check_success()) {
            bot.getApi().sendMessage(message->chat->id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ.\n\n–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É?\n–í–≤–µ–¥–∏—Ç–µ /newgame");
            users[message->chat->id].end_game();
        }
        
    });


    try {
        printf("Bot username: %s\n", bot.getApi().getMe()->username.c_str());
        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            printf("Long poll started\n");
            longPoll.start();
        }
    } catch (TgBot::TgException& e) {
        printf("error: %s\n", e.what());
    }
    return 0;
}

/*
    COMPILATION COMMAND
    g++ quiz-model.cpp mystery-word-bot.cpp -o telegram_bot --std=c++14 -I/usr/local/include -lTgBot -lboost_system -lssl -lcrypto -lpthread
*/ 